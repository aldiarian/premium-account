@mixin resetPremium {
    html{
        font-size: 100%;
    }
	a,
	a:hover{
		text-decoration: none;
	}
	p{
		line-height: 1.3em;
	}
	input{
		border: 1px solid $color1;
	}
	input[type="radio"],
	input[type="radio"] + label,
	input[type="checkbox"],
	input[type="checkbox"] + label{
		cursor: pointer;
	}
	input[type="radio"]{
		appearance: radio;
		height: 1.5em;
		width: 1.5em;
		margin: 0;
	}
	input[type="checkbox"]{
		appearance: checkbox;
		margin: 0;
		border-radius: 0;
    }
	
	
}


@mixin maintitle{
	font-size: 20px;
	line-height: 1em;
	font-family: $fontRegular;
	text-align: center;
    color: black;
    .is-expansion &{
        font-family: $fontRegular;
        color: $colorTextMain;
      }
  }

@mixin links{
	color: $colorlink;
	text-decoration: none;
	&:hover{
		text-decoration: underline;
	}
}


// ============================================================================================
// Px to rem: transform px values to rem with base 16 by default
// ============================================================================================
@function px-rem($size, $base: 16px) {
    @if (unitless($size)) {
        $size: $size * 1px;
    }
    @if (unitless($base)) {
        $base: $base * 1px;
    }
    @return 1rem * ($size / $base);
}
// ============================================================================================
// Font Face
// ============================================================================================
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;
    $extmods: ( eot: "?", svg: "#" + str-replace($name, " ", "_"));
    $formats: ( otf: "opentype", ttf: "truetype");
    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }
    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}

// Function for get the hover an active states
// by slightly darken a color base.
// @param $color - color to shade
// @param $percentage - percentage of `$color` in returned color
// @return {Color}
// color: get-state-color( color , $state: 'hover');
@function get-state-color($color, $state: 'hover') {
    @if $state == 'hover' {
        @return mix(black, $color, 20%);
    } 
    @else if $state == 'active' {
        @return mix(black, $color, 36%);
    }
}



// ============================================================================================
// Get value from map with differents depth
// @param {Map} $map
// @param {List} $keys
// @return {value} value of the map
// ============================================================================================
@function get-value-from-map($map, $keys...) {
    $internalmap: $map;
    @if type-of($map) != 'map' {
        @error 'The map variable that is passed in not a map but a `#{type-of($internalmap)}` with the value of `#{$internalmap}`. Map you passed: #{$map} and parameters: #{$keys}';
    }
    @else {
        @each $key in $keys {
            @if type-of(map-get($internalmap, $key)) != 'map' {
                @if type-of(map-get($internalmap, $key)) == 'null' {
                    @error 'Key `#{$key}` does not exists in map, only the following elements: (`#{map-keys($internalmap)}`). Map you passed: #{$map} and parameters: #{$keys}';
                }
                @else {
                    @if index($keys, $key) < length($keys) {
                        $plus: '';
                        @for $i from index($keys, $key)+1 through length($keys) {
                            $plus: $plus + '"' + nth($keys, $i) + '"';
                        }
                        @error 'you passed more parameters than needed to `get-value-from-map`, these parameters were not used: #{$plus}. Map you passed: #{$map} and parameters: #{$keys}'
                    }
                    @return map-get($internalmap, $key);
                }
            }
            @else {
                $internalmap: map-get($internalmap, $key);
            }
        }
    }
}
